<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ru.rerumu.lists.mappers.SeriesBookMapper">

    <resultMap id="SeriesBookResultMap" type="ru.rerumu.lists.model.SeriesBookRelation">
        <association property="book"
                     javaType="ru.rerumu.lists.model.Book"
                     column="{bookId=book_book_id,readListId=readListId}"
                     select="ru.rerumu.lists.mappers.BookMapper.getOne"
        />
        <association property="series"
                     javaType="ru.rerumu.lists.model.Series"
                     column="{seriesId=series_series_id,seriesListId=readListId}"
                     select="ru.rerumu.lists.mappers.SeriesMapper.getOne"
        />
    </resultMap>

    <insert id="add">
        insert into lists.series_books(series_series_id, series_list_id, book_book_id, book_list_id, series_order)
        values(#{seriesId}, #{readListId}, #{bookId},#{readListId}, #{seriesOrder})
    </insert>

    <delete id="deleteBySeries">
        delete from lists.series_books
        where series_series_id=#{seriesId}
    </delete>

    <delete id="delete">
        delete from lists.series_books
        where series_series_id=#{seriesId}
          and book_book_id = #{bookId}
          and book_list_id = #{readListId}
    </delete>

    <select id="getByBookId" resultMap="SeriesBookResultMap">
        select  sb.book_book_id,
                sb.book_list_id as readListId,
                sb.series_series_id,
                sb.series_order
        from lists.series_books sb
        where sb.book_book_id = #{bookId}
    </select>

    <select id="getSeriesIdsByBookId" resultType="Long">
        select  sb.series_series_id
        from lists.series_books sb
        where sb.book_book_id = #{bookId}
          and sb.book_list_id = #{readListId}
    </select>

    <select id="getBookIdsBySeriesId" resultType="Long">
        select  sb.book_book_id
        from lists.series_books sb
        where sb.series_series_id=#{seriesId}
    </select>

    <select id="getOrder" resultType="Long">
        select  sb.series_order
        from lists.series_books sb
        where sb.book_book_id = #{bookId}
          and sb.series_series_id = #{seriesId}
          and sb.book_list_id = #{readListId}
    </select>

    <select id="getOrderByIdOnly" resultType="Long">
        select  sb.series_order
        from lists.series_books sb
        where sb.book_book_id = #{bookId}
        and sb.series_series_id = #{seriesId}
    </select>

    <update id="update">
        update lists.series_books sb
        set series_order=#{seriesOrder}
        where sb.book_book_id = #{bookId}
          and sb.series_series_id = #{seriesId}
          and sb.book_list_id = #{readListId}
    </update>

    <update id="save">
        update lists.series_books sb
        set series_order=#{order}
        where sb.book_book_id = #{book.bookId}
        and sb.series_series_id = #{series.seriesId}
    </update>

    <update id="merge">
        MERGE INTO lists.series_books sb
        USING
        (
            select  series_series_id,
                    book_book_id
            from lists.series_books
            where book_book_id = #{book.bookId}
            and series_series_id = #{series.seriesId}
        ) sb2
            on sb2.series_series_id = sb.series_series_id
            and sb2.book_book_id = sb.book_book_id
        when matched then
            update set series_order=#{order}
        when not matched then
            insert into lists.series_books(series_series_id, series_list_id, book_book_id, book_list_id, series_order)
            values(#{series.seriesId}, #{series.seriesListId}, #{book.bookId},#{book.readListId}, #{order})
    </update>

</mapper>